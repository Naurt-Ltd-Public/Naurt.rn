// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RNaurt
import Combine
import CoreLocation
import CoreMotion
import Foundation
import LASwift
import Swift
import UIKit
import Zip
import _Concurrency
import _StringProcessing
public enum NaurtTrackingStatus {
  case FULL
  case READY
  case UNKNOWN
  case AWAITING_VALIDATION
  case FAILING_VALIDATION
  case INVALID_API_KEY
  public static func == (a: RNaurt.NaurtTrackingStatus, b: RNaurt.NaurtTrackingStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LogLevel {
  case INFO
  case WARNING
  case ERROR
  public static func == (a: RNaurt.LogLevel, b: RNaurt.LogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func logLevelToString(logLevel: RNaurt.LogLevel) -> Swift.String
public protocol NaurtDelegate {
  func didChangeInitialised(isInitialised: Swift.Bool)
  func didChangeValidated(isValidated: Swift.Bool)
  func didChangeRunning(isRunning: Swift.Bool)
  func didChangeJourneyUuid(journeyUuid: Foundation.UUID?)
  func didChangeStatus(trackingStatus: RNaurt.NaurtTrackingStatus)
  func start()
  func stop()
}
final public class Naurt {
  final public let deviceUuid: Swift.String
  final public var locationPermission: CoreLocation.CLAuthorizationStatus
  final public var isInitialised: Swift.Bool
  final public var isValidated: Swift.Bool
  final public var isRunning: Swift.Bool
  final public var journeyUuid: Foundation.UUID?
  final public var trackingStatus: RNaurt.NaurtTrackingStatus
  final public var delegate: RNaurt.NaurtDelegate?
  public init(apiKey: Swift.String)
  final public func start()
  final public func distanceBetween(_ a: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  final public func stop()
  @objc deinit
}
public struct MotionStruct {
}
public struct NaurtLocation {
  public var timestamp: Swift.Double
  public var longitude: Swift.Double
  public var latitude: Swift.Double
  public var altitude: Swift.Double
  public var verticalAccuracy: Swift.Double
  public var speed: Swift.Double
  public var speedAccuracy: Swift.Double
  public var course: Swift.Double
  public var courseAccuracy: Swift.Double
  public var horizontalAccuracy: Swift.Double
  public var horizontalCovariance: Swift.Double
  public func toString() -> Swift.String
}
public struct rawLocation {
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var timestamp: Swift.UInt64
}
public func distanceBetween(_ a: CoreLocation.CLLocationCoordinate2D, _ b: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
extension RNaurt.NaurtTrackingStatus : Swift.Equatable {}
extension RNaurt.NaurtTrackingStatus : Swift.Hashable {}
extension RNaurt.LogLevel : Swift.Equatable {}
extension RNaurt.LogLevel : Swift.Hashable {}
